// Code generated by 'go generate'; DO NOT EDIT.

package sys

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modmsi     = windows.NewLazySystemDLL("msi.dll")
	modshell32 = windows.NewLazySystemDLL("shell32.dll")

	procMsiDatabaseOpenViewW = modmsi.NewProc("MsiDatabaseOpenViewW")
	procMsiInstallProductW   = modmsi.NewProc("MsiInstallProductW")
	procMsiOpenDatabaseW     = modmsi.NewProc("MsiOpenDatabaseW")
	procMsiRecordGetStringW  = modmsi.NewProc("MsiRecordGetStringW")
	procMsiViewExecute       = modmsi.NewProc("MsiViewExecute")
	procMsiViewFetch         = modmsi.NewProc("MsiViewFetch")
	procShellExecuteW        = modshell32.NewProc("ShellExecuteW")
)

func MsiDatabaseOpenView(database int, query string, view *int) (e error) {
	var _p0 *uint16
	_p0, e = syscall.UTF16PtrFromString(query)
	if e != nil {
		return
	}
	return _MsiDatabaseOpenView(database, _p0, view)
}

func _MsiDatabaseOpenView(database int, query *uint16, view *int) (e error) {
	r0, _, _ := syscall.Syscall(procMsiDatabaseOpenViewW.Addr(), 3, uintptr(database), uintptr(unsafe.Pointer(query)), uintptr(unsafe.Pointer(view)))
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func MsiInstallProduct(path string, command string) (e error) {
	var _p0 *uint16
	_p0, e = syscall.UTF16PtrFromString(path)
	if e != nil {
		return
	}
	var _p1 *uint16
	_p1, e = syscall.UTF16PtrFromString(command)
	if e != nil {
		return
	}
	return _MsiInstallProduct(_p0, _p1)
}

func _MsiInstallProduct(path *uint16, command *uint16) (e error) {
	r0, _, _ := syscall.Syscall(procMsiInstallProductW.Addr(), 2, uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(command)), 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func MsiOpenDatabase(path string, persist int, database *int) (e error) {
	var _p0 *uint16
	_p0, e = syscall.UTF16PtrFromString(path)
	if e != nil {
		return
	}
	return _MsiOpenDatabase(_p0, persist, database)
}

func _MsiOpenDatabase(path *uint16, persist int, database *int) (e error) {
	r0, _, _ := syscall.Syscall(procMsiOpenDatabaseW.Addr(), 3, uintptr(unsafe.Pointer(path)), uintptr(persist), uintptr(unsafe.Pointer(database)))
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func MsiRecordGetString(record int, field int, buf *uint16, bufSize *int) (e error) {
	r0, _, _ := syscall.Syscall6(procMsiRecordGetStringW.Addr(), 4, uintptr(record), uintptr(field), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(bufSize)), 0, 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func MsiViewExecute(view int, record int) (e error) {
	r0, _, _ := syscall.Syscall(procMsiViewExecute.Addr(), 2, uintptr(view), uintptr(record), 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func MsiViewFetch(view int, record *int) (e error) {
	r0, _, _ := syscall.Syscall(procMsiViewFetch.Addr(), 2, uintptr(view), uintptr(unsafe.Pointer(record)), 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func ShellExecute(hwnd int, oper string, file string, param string, dir string, show int) (err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(oper)
	if err != nil {
		return
	}
	var _p1 *uint16
	_p1, err = syscall.UTF16PtrFromString(file)
	if err != nil {
		return
	}
	var _p2 *uint16
	_p2, err = syscall.UTF16PtrFromString(param)
	if err != nil {
		return
	}
	var _p3 *uint16
	_p3, err = syscall.UTF16PtrFromString(dir)
	if err != nil {
		return
	}
	return _ShellExecute(hwnd, _p0, _p1, _p2, _p3, show)
}

func _ShellExecute(hwnd int, oper *uint16, file *uint16, param *uint16, dir *uint16, show int) (err error) {
	r1, _, e1 := syscall.Syscall6(procShellExecuteW.Addr(), 6, uintptr(hwnd), uintptr(unsafe.Pointer(oper)), uintptr(unsafe.Pointer(file)), uintptr(unsafe.Pointer(param)), uintptr(unsafe.Pointer(dir)), uintptr(show))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
